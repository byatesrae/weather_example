// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/byatesrae/weather/internal/providerquery"
	"sync"
)

// Ensure, that WeatherServiceMock does implement WeatherService.
// If this is not the case, regenerate this file with moq.
var _ WeatherService = &WeatherServiceMock{}

// WeatherServiceMock is a mock implementation of WeatherService.
//
//	func TestSomethingThatUsesWeatherService(t *testing.T) {
//
//		// make and configure a mocked WeatherService
//		mockedWeatherService := &WeatherServiceMock{
//			ReadWeatherResultFunc: func(ctx context.Context, city string) (*providerquery.WeatherResult, error) {
//				panic("mock out the ReadWeatherResult method")
//			},
//		}
//
//		// use mockedWeatherService in code that requires WeatherService
//		// and then make assertions.
//
//	}
type WeatherServiceMock struct {
	// ReadWeatherResultFunc mocks the ReadWeatherResult method.
	ReadWeatherResultFunc func(ctx context.Context, city string) (*providerquery.WeatherResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadWeatherResult holds details about calls to the ReadWeatherResult method.
		ReadWeatherResult []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// City is the city argument value.
			City string
		}
	}
	lockReadWeatherResult sync.RWMutex
}

// ReadWeatherResult calls ReadWeatherResultFunc.
func (mock *WeatherServiceMock) ReadWeatherResult(ctx context.Context, city string) (*providerquery.WeatherResult, error) {
	if mock.ReadWeatherResultFunc == nil {
		panic("WeatherServiceMock.ReadWeatherResultFunc: method is nil but WeatherService.ReadWeatherResult was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		City string
	}{
		Ctx:  ctx,
		City: city,
	}
	mock.lockReadWeatherResult.Lock()
	mock.calls.ReadWeatherResult = append(mock.calls.ReadWeatherResult, callInfo)
	mock.lockReadWeatherResult.Unlock()
	return mock.ReadWeatherResultFunc(ctx, city)
}

// ReadWeatherResultCalls gets all the calls that were made to ReadWeatherResult.
// Check the length with:
//
//	len(mockedWeatherService.ReadWeatherResultCalls())
func (mock *WeatherServiceMock) ReadWeatherResultCalls() []struct {
	Ctx  context.Context
	City string
} {
	var calls []struct {
		Ctx  context.Context
		City string
	}
	mock.lockReadWeatherResult.RLock()
	calls = mock.calls.ReadWeatherResult
	mock.lockReadWeatherResult.RUnlock()
	return calls
}
